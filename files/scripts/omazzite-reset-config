#!/bin/bash

# This script allows a user to reset their Omazzite personal configuration files
# by copying them from the /etc/skel directory to their home directory.
# It also creates a backup of existing configuration files before overwriting.

set -oue pipefail

SKEL_DIR="/etc/skel"
HOME_DIR="$HOME"
BACKUP_DIR="$HOME/.config_backup_$(date +%Y%m%d%H%M%S)"

echo "WARNING: This script will reset your Omazzite configuration files to their default Omadora state."
echo "         Existing configuration files will be backed up, but will be overwritten."
echo "         Proceed with caution!"
echo ""

read -p "Do you want to continue with the Omazzite configuration reset? (Y/n): " confirm
if [[ ! "$confirm" =~ ^[yY]$ ]] && [[ ! -z "$confirm" ]]; then
    echo "Configuration reset cancelled."
    exit 0
fi

if [ ! -d "$SKEL_DIR" ]; then
    echo "Error: Default configuration directory $SKEL_DIR not found."
    echo "This script is intended for systems where Omazzite defaults are installed."
    exit 1
fi

echo "Creating backup of existing configuration files in $BACKUP_DIR..."
mkdir -p "$BACKUP_DIR"

# 1. Check for and handle existing ~/.config.tmp, then move existing ~/.config
CONFIG_DIR="$HOME_DIR/.config"
CONFIG_TMP_DIR="$HOME_DIR/.config.tmp"

# Check if ~/.config.tmp already exists
if [ -d "$CONFIG_TMP_DIR" ]; then
    echo "Warning: $CONFIG_TMP_DIR already exists. This might be from a previous interrupted run."
    read -p "Do you want to remove the existing $CONFIG_TMP_DIR? (Y/n): " confirm_tmp
    if [[ ! "$confirm_tmp" =~ ^[yY]$ ]] && [[ ! -z "$confirm_tmp" ]]; then
        echo "Configuration reset cancelled as $CONFIG_TMP_DIR was not removed."
        exit 1
    fi
    echo "Removing existing $CONFIG_TMP_DIR..."
    rm -rf "$CONFIG_TMP_DIR"
fi

# Move existing ~/.config to ~/.config.tmp

if [ -d "$CONFIG_DIR" ]; then
    echo "Moving existing $CONFIG_DIR to $CONFIG_TMP_DIR..."
    mv "$CONFIG_DIR" "$CONFIG_TMP_DIR"
fi

# 2. Create a new ~/.config directory
echo "Creating new $CONFIG_DIR..."
mkdir -p "$CONFIG_DIR"

# 3. Copy default configurations from /etc/skel/.local/share/omadora/config/* to ~/.config/
OMADORA_CONFIG_SOURCE="$SKEL_DIR/.local/share/omadora/config"
if [ -d "$OMADORA_CONFIG_SOURCE" ]; then
    echo "Copying default configurations from $OMADORA_CONFIG_SOURCE to $CONFIG_DIR..."
    cp -rL "$OMADORA_CONFIG_SOURCE"/* "$CONFIG_DIR/"
else
    echo "Warning: Omadora config source directory '$OMADORA_CONFIG_SOURCE' not found."
fi

# Copy Hyprland configurations
SKEL_HYPR_CONFIG_SOURCE="$SKEL_DIR/.config/hypr"
HOME_HYPR_CONFIG_DEST="$HOME_DIR/.config/hypr"
if [ -d "$SKEL_HYPR_CONFIG_SOURCE" ]; then
    echo "Copying Hyprland configurations from $SKEL_HYPR_CONFIG_SOURCE to $HOME_HYPR_CONFIG_DEST..."
    mkdir -p "$HOME_HYPR_CONFIG_DEST"
    cp -rL "$SKEL_HYPR_CONFIG_SOURCE"/* "$HOME_HYPR_CONFIG_DEST/"
else
    echo "Warning: Hyprland config source '$SKEL_HYPR_CONFIG_SOURCE' not found in $SKEL_DIR."
fi

# Copy UWSM configurations
SKEL_UWSM_CONFIG_SOURCE="$SKEL_DIR/.config/uwsm"
HOME_UWSM_CONFIG_DEST="$HOME_DIR/.config/uwsm"
if [ -d "$SKEL_UWSM_CONFIG_SOURCE" ]; then
    echo "Copying UWSM configurations from $SKEL_UWSM_CONFIG_SOURCE to $HOME_UWSM_CONFIG_DEST..."
    mkdir -p "$HOME_UWSM_CONFIG_DEST"
    cp -rL "$SKEL_UWSM_CONFIG_SOURCE"/* "$HOME_UWSM_CONFIG_DEST/"
else
    echo "Warning: UWSM config source '$SKEL_UWSM_CONFIG_SOURCE' not found in $SKEL_DIR."
fi

# 4. Copy other top-level configuration files/directories from /etc/skel
echo "Copying other top-level configuration files/directories from $SKEL_DIR..."

# Copy .bashrc
SKEL_BASHRC_SOURCE="$SKEL_DIR/.bashrc"
if [ -f "$SKEL_BASHRC_SOURCE" ]; then
    echo "Copying $SKEL_BASHRC_SOURCE to $HOME_DIR/.bashrc..."
    cp -L "$SKEL_BASHRC_SOURCE" "$HOME_DIR/.bashrc"
else
    echo "Warning: .bashrc source '$SKEL_BASHRC_SOURCE' not found in $SKEL_DIR."
fi

# Copy .XCompose
SKEL_XCOMPOSE_SOURCE="$SKEL_DIR/.XCompose"
if [ -f "$SKEL_XCOMPOSE_SOURCE" ]; then
    echo "Copying $SKEL_XCOMPOSE_SOURCE to $HOME_DIR/.XCompose..."
    cp -L "$SKEL_XCOMPOSE_SOURCE" "$HOME_DIR/.XCompose"
else
    echo "Warning: .XCompose source '$SKEL_XCOMPOSE_SOURCE' not found in $SKEL_DIR."
fi

# Copy .local/share/applications/icons
SKEL_LOCAL_ICONS_SOURCE="$SKEL_DIR/.local/share/applications/icons"
SKEL_LOCAL_ICONS_DEST="$HOME_DIR/.local/share/applications/icons"
if [ -d "$SKEL_LOCAL_ICONS_SOURCE" ]; then
    echo "Copying $SKEL_LOCAL_ICONS_SOURCE to $SKEL_LOCAL_ICONS_DEST..."
    mkdir -p "$(dirname "$SKEL_LOCAL_ICONS_DEST")"
    cp -rL "$SKEL_LOCAL_ICONS_SOURCE" "$SKEL_LOCAL_ICONS_DEST"
else
    echo "Warning: Local icons source '$SKEL_LOCAL_ICONS_SOURCE' not found in $SKEL_DIR."
fi

# Copy .local/share/omadora
SKEL_LOCAL_OMADORA_SOURCE="$SKEL_DIR/.local/share/omadora"
SKEL_LOCAL_OMADORA_DEST="$HOME_DIR/.local/share/omadora"
if [ -d "$SKEL_LOCAL_OMADORA_SOURCE" ]; then
    echo "Copying $SKEL_LOCAL_OMADORA_SOURCE to $SKEL_LOCAL_OMADORA_DEST..."
    mkdir -p "$(dirname "$SKEL_LOCAL_OMADORA_DEST")"
    cp -rL "$SKEL_LOCAL_OMADORA_SOURCE" "$SKEL_LOCAL_OMADORA_DEST"
else
    echo "Warning: Local omadora source '$SKEL_LOCAL_OMADORA_SOURCE' not found in $SKEL_DIR."
fi

# Clone LazyVim starter into ~/.config/nvim for a fresh setup
echo "Setting up default Neovim (LazyVim) configuration..."
if [ -d "$HOME_DIR/.config/nvim" ]; then
    echo "Removing existing ~/.config/nvim..."
    rm -rf "$HOME_DIR/.config/nvim"
fi
git clone https://github.com/LazyVim/starter "$HOME_DIR/.config/nvim"
if [ -d "$HOME_DIR/.config/nvim" ]; then
    echo "Removing .git directory from cloned LazyVim starter..."
    rm -rf "$HOME_DIR/.config/nvim/.git"
fi

# Copy .local/share/fonts (commented out as directory is expected to be empty)
# SKEL_LOCAL_FONTS_SOURCE="$SKEL_DIR/.local/share/fonts"
# SKEL_LOCAL_FONTS_DEST="$HOME_DIR/.local/share/fonts"
# if [ -d "$SKEL_LOCAL_FONTS_SOURCE" ]; then
#     echo "Copying $SKEL_LOCAL_FONTS_SOURCE to $SKEL_LOCAL_FONTS_DEST..."
#     mkdir -p "$SKEL_LOCAL_FONTS_DEST"
#     # Only copy if there are files in the source directory
#     if [ -n "$(ls -A "$SKEL_LOCAL_FONTS_SOURCE" 2>/dev/null)" ]; then
#         cp -rL "$SKEL_LOCAL_FONTS_SOURCE"/* "$SKEL_LOCAL_FONTS_DEST/"
#     else
#         echo "Warning: Local fonts source directory '$SKEL_LOCAL_FONTS_SOURCE' is empty."
#     fi
# else
#     echo "Warning: Local fonts source '$SKEL_LOCAL_FONTS_SOURCE' not found in $SKEL_DIR."
# fi

# 5. Merge configuration files from /etc/skel/.local/share/omadora/default/ into ~/.config/
# This ensures that directories present in both /etc/skel/.config/ (from omadora/config/)
# and /etc/skel/.local/share/omadora/default/ contain files from both sources.
echo "Merging default configuration files from $SKEL_DIR/.local/share/omadora/default/ into ~/.config/..."
SKEL_DEFAULT_SOURCE="$SKEL_DIR/.local/share/omadora/default"
if [ -d "$SKEL_DEFAULT_SOURCE" ]; then
    # Use rsync to recursively copy the contents of each directory in default/ into the corresponding directory in ~/.config/
    # -a: archive mode (preserves permissions, times, symbolic links, etc.)
    # -v: verbose (shows what is being processed)
    # -L: dereference symlinks (to match cp -L behavior)
    # NOTE: Not using --ignore-existing here, as we want to merge contents of directories.
    rsync -avL "$SKEL_DEFAULT_SOURCE/"* "$HOME_DIR/.config/"
else
    echo "Warning: Default config source directory '$SKEL_DEFAULT_SOURCE' not found in $SKEL_DIR."
fi

# 6. Merge back non-conflicting items from ~/.config.tmp
if [ -d "$CONFIG_TMP_DIR" ]; then
    echo "Merging back non-conflicting items from $CONFIG_TMP_DIR..."
    # Use rsync to merge, which will skip files/dirs that already exist in the destination.
    # -a: archive mode (preserves permissions, times, symbolic links, etc.)
    # -v: verbose (shows what is being processed)
    # --ignore-existing: skip files that already exist in the destination
    rsync -av --ignore-existing "$CONFIG_TMP_DIR/" "$CONFIG_DIR/"
    
    # Optionally, remove the temporary directory after merging
    echo "Removing temporary directory $CONFIG_TMP_DIR..."
    rm -rf "$CONFIG_TMP_DIR"
fi

echo "Setting up ~/.config/omadora structure..."

# 1. Setup theme links (from omadora/install/config/theme.sh)
mkdir -p "$HOME_DIR/.config/omadora/themes"
# Note: Using /etc/skel/.local/share/omadora/themes as the source for themes
for f in "$SKEL_DIR/.local/share/omadora/themes/"*; do
    if [ -e "$f" ]; then
        ln -snf "$f" "$HOME_DIR/.config/omadora/themes/"
    fi
done

# 2. Set initial theme (from omadora/install/config/theme.sh)
mkdir -p "$HOME_DIR/.config/omadora/current"
ln -snf "$HOME_DIR/.config/omadora/themes/rose-pine-darker" "$HOME_DIR/.config/omadora/current/theme"
ln -snf "$HOME_DIR/.config/omadora/current/theme/backgrounds/01_background.png" "$HOME_DIR/.config/omadora/current/background"

# 3. Set specific app links for current theme (from omadora/install/config/theme.sh)
# Note: ~/.config/nvim/lua/plugins/ might not exist yet, so we ensure it does.
mkdir -p "$HOME_DIR/.config/nvim/lua/plugins"
ln -snf "$HOME_DIR/.config/omadora/current/theme/neovim.lua" "$HOME_DIR/.config/nvim/lua/plugins/theme.lua"

mkdir -p "$HOME_DIR/.config/btop/themes"
ln -snf "$HOME_DIR/.config/omadora/current/theme/btop.theme" "$HOME_DIR/.config/btop/themes/current.theme"

mkdir -p "$HOME_DIR/.config/mako"
ln -snf "$HOME_DIR/.config/omadora/current/theme/mako.ini" "$HOME_DIR/.config/mako/config"

# 4. Setup branding (from omadora/install/config/branding.sh)
mkdir -p "$HOME_DIR/.config/omadora/branding"
cp -L "$SKEL_DIR/.local/share/omadora/icon.txt" "$HOME_DIR/.config/omadora/branding/about.txt"
cp -L "$SKEL_DIR/.local/share/omadora/logo.txt" "$HOME_DIR/.config/omadora/branding/screensaver.txt"

# --- End of Bulk Copy Strategy Implementation ---

echo ""
echo "Omazzite configuration reset complete. A backup of your previous configuration is available at $BACKUP_DIR."
echo "For changes to take full effect, it is highly recommended to perform a full system reboot, or at least restart your desktop environment (e.g., Hyprland) and any relevant applications."
echo "For Hyprland, you might need to run 'hyprctl reload' or log out and log back in."