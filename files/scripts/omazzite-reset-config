#!/bin/bash

# This script allows a user to reset their Omazzite personal configuration files
# by copying them from the /etc/skel directory to their home directory.
# It also creates a backup of existing configuration files before overwriting.

set -oue pipefail

SKEL_DIR="/etc/skel"
HOME_DIR="$HOME"
BACKUP_DIR="$HOME/.config_backup_$(date +%Y%m%d%H%M%S)"

echo "WARNING: This script will reset your Omazzite configuration files to their default Omadora state."
echo "         Existing configuration files will be backed up, but will be overwritten."
echo "         Proceed with caution!"
echo ""

read -p "Do you want to continue with the Omazzite configuration reset? (Y/n): " confirm
if [[ ! "$confirm" =~ ^[yY]$ ]] && [[ ! -z "$confirm" ]]; then
    echo "Configuration reset cancelled."
    exit 0
fi

if [ ! -d "$SKEL_DIR" ]; then
    echo "Error: Default configuration directory $SKEL_DIR not found."
    echo "This script is intended for systems where Omazzite defaults are installed."
    exit 1
fi

echo "Creating backup of existing configuration files in $BACKUP_DIR..."
mkdir -p "$BACKUP_DIR"

# 1. Move existing ~/.config to ~/.config.tmp
CONFIG_DIR="$HOME_DIR/.config"
CONFIG_TMP_DIR="$HOME_DIR/.config.tmp"

if [ -d "$CONFIG_DIR" ]; then
    echo "Moving existing $CONFIG_DIR to $CONFIG_TMP_DIR..."
    mv "$CONFIG_DIR" "$CONFIG_TMP_DIR"
fi

# 2. Create a new ~/.config directory
echo "Creating new $CONFIG_DIR..."
mkdir -p "$CONFIG_DIR"

# 3. Copy default configurations from /etc/skel/.local/share/omadora/config/* to ~/.config/
OMADORA_CONFIG_SOURCE="$SKEL_DIR/.local/share/omadora/config"
if [ -d "$OMADORA_CONFIG_SOURCE" ]; then
    echo "Copying default configurations from $OMADORA_CONFIG_SOURCE to $CONFIG_DIR..."
    cp -rL "$OMADORA_CONFIG_SOURCE"/* "$CONFIG_DIR/"
else
    echo "Warning: Omadora config source directory '$OMADORA_CONFIG_SOURCE' not found."
fi

# 4. Copy other specified configuration files/directories
echo "Copying other specified configurations..."

# Copy .bashrc
BASHRC_SOURCE="$SKEL_DIR/.local/share/omadora/default/bashrc"
if [ -f "$BASHRC_SOURCE" ]; then
    echo "Copying $BASHRC_SOURCE to $HOME_DIR/.bashrc..."
    cp -L "$BASHRC_SOURCE" "$HOME_DIR/.bashrc"
else
    echo "Warning: .bashrc source '$BASHRC_SOURCE' not found."
fi

# Copy .XCompose
XCOMPOSE_SOURCE="$SKEL_DIR/.local/share/omadora/default/xcompose"
if [ -f "$XCOMPOSE_SOURCE" ]; then
    echo "Copying $XCOMPOSE_SOURCE to $HOME_DIR/.XCompose..."
    cp -L "$XCOMPOSE_SOURCE" "$HOME_DIR/.XCompose"
else
    echo "Warning: .XCompose source '$XCOMPOSE_SOURCE' not found."
fi

# Copy .local/share/applications/icons
LOCAL_ICONS_SOURCE="$SKEL_DIR/.local/share/omadora/applications/icons"
LOCAL_ICONS_DEST="$HOME_DIR/.local/share/applications/icons"
if [ -d "$LOCAL_ICONS_SOURCE" ]; then
    echo "Copying $LOCAL_ICONS_SOURCE to $LOCAL_ICONS_DEST..."
    mkdir -p "$(dirname "$LOCAL_ICONS_DEST")"
    cp -rL "$LOCAL_ICONS_SOURCE" "$LOCAL_ICONS_DEST"
else
    echo "Warning: Local icons source '$LOCAL_ICONS_SOURCE' not found."
fi

# Copy .local/share/omadora
LOCAL_OMADORA_SOURCE="$SKEL_DIR/.local/share/omadora"
LOCAL_OMADORA_DEST="$HOME_DIR/.local/share/omadora"
if [ -d "$LOCAL_OMADORA_SOURCE" ]; then
    echo "Copying $LOCAL_OMADORA_SOURCE to $LOCAL_OMADORA_DEST..."
    mkdir -p "$(dirname "$LOCAL_OMADORA_DEST")"
    cp -rL "$LOCAL_OMADORA_SOURCE" "$LOCAL_OMADORA_DEST"
else
    echo "Warning: Local omadora source '$LOCAL_OMADORA_SOURCE' not found."
fi

# Copy .local/share/fonts (from omadora/config/fonts)
LOCAL_FONTS_SOURCE="$SKEL_DIR/.local/share/omadora/config/fonts"
LOCAL_FONTS_DEST="$HOME_DIR/.local/share/fonts"
if [ -d "$LOCAL_FONTS_SOURCE" ]; then
    echo "Copying $LOCAL_FONTS_SOURCE to $LOCAL_FONTS_DEST..."
    mkdir -p "$LOCAL_FONTS_DEST"
    cp -rL "$LOCAL_FONTS_SOURCE"/* "$LOCAL_FONTS_DEST/"
else
    echo "Warning: Local fonts source '$LOCAL_FONTS_SOURCE' not found."
fi

# 5. Merge back non-conflicting items from ~/.config.tmp
if [ -d "$CONFIG_TMP_DIR" ]; then
    echo "Merging back non-conflicting items from $CONFIG_TMP_DIR..."
    # Use rsync to merge, which will skip files/dirs that already exist in the destination.
    # -a: archive mode (preserves permissions, times, symbolic links, etc.)
    # -v: verbose (shows what is being processed)
    # --ignore-existing: skip files that already exist in the destination
    rsync -av --ignore-existing "$CONFIG_TMP_DIR/" "$CONFIG_DIR/"
    
    # Optionally, remove the temporary directory after merging
    echo "Removing temporary directory $CONFIG_TMP_DIR..."
    rm -rf "$CONFIG_TMP_DIR"
fi

# --- End of Bulk Copy Strategy Implementation ---

echo ""
echo "Omazzite configuration reset complete. A backup of your previous configuration is available at $BACKUP_DIR."
echo "For changes to take full effect, it is highly recommended to perform a full system reboot, or at least restart your desktop environment (e.g., Hyprland) and any relevant applications."
echo "For Hyprland, you might need to run 'hyprctl reload' or log out and log back in."